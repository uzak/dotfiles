" Setup {{{1

language en_US.UTF-8
set nocompatible
syntax on

" install plug if not available yet
let vim_plug_just_installed = 0
let vim_plug_path = expand('~/.vim/autoload/plug.vim')

if !filereadable(vim_plug_path)
    echo "Installing Vim-plug..."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let vim_plug_just_installed = 1
endif

" manually load vim-plug the first time
if vim_plug_just_installed
    :execute 'source '.fnameescape(vim_plug_path)
endif

" Plugins {{{1
"
call plug#begin("~/.vim/plugged") 

Plug 'aperezdc/vim-template'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'vimwiki/vimwiki'

"Plug 'valloric/MatchTagAlways'          " highlight enclosing html/xml tags 
Plug 'google/vim-searchindex'           " shows  'M/N' matches found
Plug 'Shougo/context_filetype.vim'      " Completion from other opened files
Plug 'sheerun/vim-polyglot'             " Better language packs
Plug 'bronson/vim-visual-star-search'   " search for visual sel. by */#
Plug 'tpope/vim-commentary'             " comment stuff out (`gcc`/`gc`+motion)
Plug 'mhinz/vim-signify'                " indicate VCS changes 
Plug 'alvan/vim-closetag'

Plug 'SidOfc/mkdx'                      " useful markdown functions

Plug 'tpope/vim-surround'

Plug 'tpope/vim-fugitive'

call plug#end()

" Install plugins the first time vim runs
if vim_plug_just_installed
    echo "Installing Bundles, please ignore key map error messages"
    :PlugInstall
endif


" Options {{{1

let mapleader = ","
set autoindent
set autoread
set autowrite
set backspace=indent,eol,start
set clipboard=unnamed,unnamedplus       " use system clipboard
set colorcolumn=80
set complete+=kspell
set completeopt=menuone,preview
set encoding=utf-8
set expandtab
set fileformat=unix
set foldlevel=99
set foldmethod=marker
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set listchars=extends:»,precedes:«,trail:·,tab:⇥\ ,eol:↵,space:␣
set mouse=a
set nojoinspaces
set noswapfile
set path+=**            " https://www.youtube.com/watch?v=XA2WjJbmmoM
set scrolloff=3         " keep cursor 3 lines away from screen border
set shiftround
set shiftwidth=4
set showbreak=\\
set showcmd
set showmatch
set showmode
set smartcase
set softtabstop=4
set splitbelow
"set splitright
set tabstop=4
set timeoutlen=500      " how long we wait for another keypress
"set ttyfast
set wildignorecase
set wildignore=*.pyc,__pycache__,venv
set wildmenu
set wildmode=list:longest,list:full
set wrap
set wrapscan
set background=dark
set number
set spelllang=en_us,de_at,sk

"colorscheme zellner
colorscheme morning

" deactivate syntax highlighting when diffing
if &diff
  syntax off
endif

" backup, undo and viminfo file
set backup
set undofile                      " undo after you re-open the file
set backupdir=~/.vim/backups " where to put backup files
set undodir=~/.vim/undos

if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif

" OS specific {{{2

if has("win32")
    let skip_defaults_vim = 1
    set viminfo = ""
endif

" Autocommands {{{1

filetype plugin indent on       "customizable indendation per file type

" define a group `init` and initialize.
augroup init
    autocmd!

    " Remember last location/cursor in file
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

    " Autoresize windows/splits when vim resizes
    autocmd VimResized * wincmd =

    " spell correction on markdown files and mail (for mutt)
    autocmd FileType mail,markdown setlocal spell
    autocmd FileType mail,markdown setlocal wrap
    autocmd FileType mail,markdown setlocal spelllang=en,sk,de

    " Spell-check Git messages
    " goto 1st line
    autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG exe 0
    autocmd FileType gitcommit setlocal spell
    autocmd FileType gitcommit setlocal spelllang=en

    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType json setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType javascript   setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType xml  setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType vue  setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType sql  setlocal ts=2 sts=2 sw=2 expandtab

    au bufnewfile,bufread *.py 
        \ set tabstop=4 | 
        \ set softtabstop=4 |
        \ set shiftwidth=4 |
        \ set textwidth=79 |
        \ set expandtab |
        \ set autoindent |
        \ set fileformat=unix 

    au bufread,bufnewfile *.c       set noexpandtab
    au bufread,bufnewfile *.h       set noexpandtab
    au bufread,bufnewfile makefile* set noexpandtab

    au bufread,bufnewfile *.conf setf dosini

    au focuslost * nested silent! wall
augroup END

" clear empty spaces at the end of lines on save of python files
autocmd BufWritePre *.py :%s/\s\+$//e

" Keymaps {{{1

" deactivate ex-mode 
nnoremap Q <nop>

" command mode shortcuts to often used dirs
cnoremap %% <C-R>=fnameescape(expand("%:p:h")."/")<CR>

" enable folding with the spacebar
nnoremap <space> za             

" spellchecking 
nnoremap <leader>de :setlocal spell spelllang=de<cr>
nnoremap <leader>en :setlocal spell spelllang=en<cr>
nnoremap <leader>sk :setlocal spell spelllang=sk<cr>
nnoremap <leader>cz :setlocal spell spelllang=cz<cr>
" nnoremap <leader>pt :setlocal spell spelllang=pt<cr>

" Leaders {{{1

" open new vertical split and change to split
nnoremap <leader>\| <C-w>v<C-w>l
nnoremap <leader>_ <C-w>s<C-w>j

" paste keeping indentation
nnoremap <leader>vs :source $MYVIMRC<cr>
nnoremap <leader>ve :e $MYVIMRC<cr>

nnoremap <expr><leader>tt ':e $HOME/Dropbox/work/codecool/tt_codecool_' . strftime('%Y-%m') . '.txt<CR>'
nnoremap <leader>td :e $HOME/Dropbox/todo.txt<cr>:set filetype=txt<cr>

" Opens an edit command with the path of the currently edited file filled in
nnoremap <leader>o :e <C-R>=expand("%:p:h") . "/" <CR>

" insert mode mappings
inoremap <leader>date <C-r>=strftime('%Y-%m-%d')<cr>
inoremap <leader>py import code; code.interact(local=dict(globals(), **locals()))<esc>

" Plugin Settings {{{1

" lightline {{{2
set noshowmode "no show mode because of lightline
let g:lightline = {
      \ 'colorscheme': 'nord', 
      \ 'active' : {
      \     'left' : [[ 'mode', 'paste' ],
      \               [ 'gitbranch', 'readonly', 'filename', 'modified' ]]
      \ },
      \ 'component_function': {
      \      'gitbranch': 'FugitiveHead'
      \  }
      \ }

" fzf {{{2
nnoremap <leader>f :Files <C-R>=expand("%:p:h")."/" <cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>rg :Rg<cr>
nnoremap <leader>l :Lines<cr>
nnoremap <leader>h :History<cr>

" aperezdc/vim-template {{{2
let g:templates_directory='~/repos/dotfiles/vim/templates'
let g:email='uzak+git@mailbox.org'
let g:username='Martin Užák'

" vimwiki {{{2
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.wiki': 'markdown'}

let g:vimwiki_list = [  
    \ {'path' : '$HOME/repos/blog/wiki/it', 
    \ 'syntax' : 'markdown', 
    \ 'auto_toc' : 1,
    \ 'ext' : '.md', 
    \ 'template_ext' : '.tpl', 
    \ 'template_path' : '$HOME/repos/blog/wiki', 
    \ 'template_default' : 'default', 
    \ 'path_html' : '$HOME/repos/blog/wiki/it', 
    \ 'custom_wiki2html': 'vimwiki_markdown'},  
    \ {'path' : '$HOME/repos/blog/wiki/vedanta', 
    \ 'syntax' : 'markdown', 
    \ 'auto_toc' : 1,
    \ 'template_ext' : '.tpl', 
    \ 'template_path' : '$HOME/repos/blog/wiki', 
    \ 'template_default' : 'default', 
    \ 'path_html' : '$HOME/repos/blog/wiki/vedanta', 
    \ 'custom_wiki2html': 'vimwiki_markdown',  
    \ 'ext' : '.md'},
    \ {'path' : '$HOME/repos/blog/wiki/cooking', 
    \ 'syntax' : 'markdown', 
    \ 'auto_toc' : 1,
    \ 'template_ext' : '.tpl', 
    \ 'template_path' : '$HOME/repos/blog/wiki', 
    \ 'template_default' : 'default', 
    \ 'path_html' : '$HOME/repos/blog/wiki/cooking', 
    \ 'custom_wiki2html': 'vimwiki_markdown',  
    \ 'ext' : '.md'},
    \ {'path' : '$HOME/repos/blog/wiki/body', 
    \ 'syntax' : 'markdown', 
    \ 'auto_toc' : 1,
    \ 'template_ext' : '.tpl', 
    \ 'template_path' : '$HOME/repos/blog/wiki', 
    \ 'template_default' : 'default', 
    \ 'path_html' : '$HOME/repos/blog/wiki/body', 
    \ 'custom_wiki2html': 'vimwiki_markdown',  
    \ 'ext' : '.md'}
    \ ]

nnoremap <leader>toc :VimwikiTOC<esc>

" add the pre tag for inserting code snippets
let g:vimwiki_valid_html_tags = 'b,i,s,u,sub,sup,kbd,br,hr,pre,script'

" vim-easy-align {{{2
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Misc Functions {{{1

let g:netrw_banner = 0 " No header in dir mode
let g:netrw_liststyle = 3 " Tree style

"}}} vim: fdm=marker foldlevel=2
